import { commitMap, creativeCommitMessages } from "./constants";
import type { Cell } from "../types/cell";

// Generate commit messages
function generateUniqueCommitMessage(commitIndex: number): string {
  const baseMessages = creativeCommitMessages;
  const messageIndex = commitIndex % baseMessages.length;
  return baseMessages[messageIndex];
}

export function generateShellScript({
  graphs,
  username,
  repository,
  branch,
}: {
  graphs: Record<string, { cells: Cell[] }>;
  username: string;
  repository: string;
  branch: string;
}) {
  const lines = [
    "#!/bin/bash",
    "set -e",
    "",
    "# Gitgenix GitHub Contribution Art Generator v2.0",
    "# Enhanced with comprehensive error handling and user-friendly interface",
    "",    "# Enhanced color palette for better categorization",
    "# Error colors",
    "RED='\\e[0;31m'",
    "BOLD_RED='\\e[1;31m'",
    "# Success colors", 
    "GREEN='\\e[0;32m'",
    "BOLD_GREEN='\\e[1;32m'",
    "# Warning colors",
    "YELLOW='\\e[1;33m'",
    "ORANGE='\\e[0;33m'",
    "# Info colors",
    "BLUE='\\e[0;34m'",
    "BOLD_BLUE='\\e[1;34m'",
    "CYAN='\\e[0;36m'",
    "BOLD_CYAN='\\e[1;36m'",
    "# Accent colors",
    "PURPLE='\\e[0;35m'",
    "BOLD_PURPLE='\\e[1;35m'",
    "MAGENTA='\\e[0;95m'",
    "# Neutral colors",
    "WHITE='\\e[1;37m'",
    "GRAY='\\e[0;90m'",
    "NC='\\e[0m' # No Color",
    "",
    "# UI Elements",
    "CHECKMARK='✅'",
    "CROSS='❌'",
    "WARNING='⚠️'",
    "INFO='ℹ️'",
    "ROCKET='🚀'",
    "GEAR='⚙️'",
    "FOLDER='📁'",
    "LINK='🔗'",
    "CLEAN='🧹'",
    "LOCK='🔐'",
    "KEY='🔑'",
    "SEARCH='🔍'",
    "PROGRESS='⏳'",
    "CELEBRATION='🎉'",
    "ART='🎨'",
    "",    "# Enhanced error cleanup function",
    "cleanup_on_error() {",
    "  echo \"\"",
    "  echo -e \"${BOLD_RED}${CROSS} Critical Error - Cleaning up workspace${NC}\"",
    "  echo -e \"${GRAY}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"",
    "  cd .. 2>/dev/null || true",
    "  if [ -d \"gitgenix\" ]; then",
    "    echo -e \"${ORANGE}${CLEAN} Removing temporary repository directory...${NC}\"",
    "    rm -rf gitgenix",
    "    echo -e \"${GREEN}${CHECKMARK} Workspace cleaned successfully${NC}\"",
    "  fi",
    "  echo -e \"${YELLOW}${INFO} You can safely run the script again${NC}\"",
    "  exit 1",
    "}",
    "",
    "# Enhanced error handling with proper cleanup",
    "trap cleanup_on_error ERR",
    "",    "# Comprehensive validation function",
    "validate_prerequisites() {",
    "  local errors=0",
    "  ",
    "  echo -e \"${BOLD_CYAN}${SEARCH} Running Pre-flight Checks${NC}\"",
    "  echo -e \"${GRAY}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"",
    "  ",
    "  # Check if git is installed",
    "  echo -ne \"${GREEN}${INFO} Checking Git installation...${NC}\"",
    "  if command -v git >/dev/null 2>&1; then",
    "    echo -e \"\\r${GREEN}${CHECKMARK} Git is installed and available${NC}\"",
    "  else",
    "    echo -e \"\\r${BOLD_RED}${CROSS} Git is not installed${NC}\"",
    "    echo -e \"${YELLOW}${INFO} Please install Git: https://git-scm.com/downloads${NC}\"",
    "    errors=$((errors + 1))",
    "  fi",
    "",
    "  # Check Git configuration",
    "  echo -ne \"${GREEN}${INFO} Checking Git configuration...${NC}\"",
    "  if git config user.name >/dev/null 2>&1 && git config user.email >/dev/null 2>&1; then",
    "    local git_name=$(git config user.name)",
    "    local git_email=$(git config user.email)",
    "    echo -e \"\\r${GREEN}${CHECKMARK} Git configured ($git_name <$git_email>)${NC}\"",
    "  else",
    "    echo -e \"\\r${BOLD_RED}${CROSS} Git not configured${NC}\"",
    "    echo -e \"${YELLOW}${INFO} Configure with:${NC}\"",
    "    echo -e \"   ${WHITE}git config --global user.name 'Your Name'${NC}\"",
    "    echo -e \"   ${WHITE}git config --global user.email 'your.email@example.com'${NC}\"",
    "    errors=$((errors + 1))",
    "  fi",
    "",
    "  # Check internet connectivity",
    "  echo -ne \"${GREEN}${INFO} Testing internet connectivity...${NC}\"",
    "  if ping -c 1 github.com >/dev/null 2>&1 || ping -n 1 github.com >/dev/null 2>&1; then",
    "    echo -e \"\\r${GREEN}${CHECKMARK} Internet connection verified${NC}\"",
    "  else",
    "    echo -e \"\\r${BOLD_RED}${CROSS} No internet connection${NC}\"",
    "    echo -e \"${YELLOW}${INFO} Please check your network connection${NC}\"",
    "    errors=$((errors + 1))",
    "  fi",
    "",
    "  # Check GitHub access",
    "  echo -ne \"${GREEN}${INFO} Testing GitHub API access...${NC}\"",
    "  if curl -s --connect-timeout 10 https://api.github.com >/dev/null 2>&1; then",
    "    echo -e \"\\r${GREEN}${CHECKMARK} GitHub API accessible${NC}\"",
    "  else",
    "    echo -e \"\\r${BOLD_RED}${CROSS} Cannot access GitHub API${NC}\"",
    "    echo -e \"${YELLOW}${INFO} Please check if GitHub is accessible from your network${NC}\"",
    "    errors=$((errors + 1))",
    "  fi",
    "",
    "  # Check if working directory is clean",
    "  echo -ne \"${GREEN}${INFO} Checking workspace...${NC}\"",
    "  if [ -d \"gitgenix\" ]; then",
    "    echo -e \"\\r${ORANGE}${WARNING} Found existing 'gitgenix' directory${NC}\"",
    "    echo -e \"${YELLOW}${INFO} Removing old workspace...${NC}\"",
    "    rm -rf gitgenix",
    "    echo -e \"${GREEN}${CHECKMARK} Workspace cleaned${NC}\"",
    "  else",
    "    echo -e \"\\r${GREEN}${CHECKMARK} Workspace is clean${NC}\"",
    "  fi",
    "",
    "  if [ $errors -gt 0 ]; then",
    "    echo \"\"",
    "    echo -e \"${BOLD_RED}${CROSS} $errors critical error(s) found${NC}\"",
    "    echo -e \"${YELLOW}${INFO} Please fix the above issues before proceeding${NC}\"",
    "    echo -e \"${GRAY}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"",
    "    exit 1",
    "  fi",
    "",
    "  echo -e \"${BOLD_GREEN}${CHECKMARK} All pre-flight checks passed!${NC}\"",
    "  echo -e \"${GRAY}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"",
    "  echo \"\"",
    "}",
    "",    "# Enhanced repository creation function",
    "create_repository_if_needed() {",
    "  echo -e \"${BOLD_CYAN}${GEAR} Repository Management${NC}\"",
    "  echo -e \"${GRAY}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"",
    "",
    "  echo -ne \"${GREEN}${SEARCH} Checking repository status...${NC}\"",
    "  ",
    "  # First check using GitHub API (more reliable for public repos)",
    "  if curl -s --connect-timeout 10 \"https://api.github.com/repos/" + username + "/" + repository + "\" | grep -q '\"name\"'; then",
    "    echo -e \"\\r${GREEN}${CHECKMARK} Repository " + username + "/" + repository + " exists and is accessible${NC}\"",
    "    return 0",
    "  fi",
    "",
    "  # Fallback: Check if repository exists by trying to access it with git",
    "  if git ls-remote --heads --exit-code \"https://github.com/" + username + "/" + repository + ".git\" >/dev/null 2>&1; then",
    "    echo -e \"\\r${GREEN}${CHECKMARK} Repository " + username + "/" + repository + " exists and is accessible${NC}\"",
    "    return 0",
    "  fi",
    "",
    "  echo -e \"\\r${ORANGE}${WARNING} Repository " + username + "/" + repository + " not found or not accessible${NC}\"",
    "  echo -e \"${YELLOW}${INFO} Attempting to create repository...${NC}\"",
    "",
    "  # Try GitHub CLI first (most reliable)",
    "  if command -v gh >/dev/null 2>&1; then",
    "    echo -ne \"${GREEN}${GEAR} Creating repository with GitHub CLI...${NC}\"",
    "    if gh repo create \"" + repository + "\" --public --description \"Gitgenix Contribution Art Repository\" --clone=false >/dev/null 2>&1; then",
    "      echo -e \"\\r${GREEN}${CHECKMARK} Repository created successfully via GitHub CLI${NC}\"",
    "      sleep 2  # Give GitHub time to process",
    "      return 0",
    "    else",
    "      echo -e \"\\r${ORANGE}${WARNING} GitHub CLI creation failed (may already exist or auth issues)${NC}\"",
    "    fi",
    "  fi",
    "",
    "  # Manual repository creation instructions",
    "  echo -e \"${YELLOW}${INFO} Please create the repository manually or verify it exists:${NC}\"",
    "  echo -e \"${GRAY}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"",
    "  echo -e \"   ${WHITE}1.${NC} Go to ${BOLD_CYAN}https://github.com/new${NC}\"",
    "  echo -e \"   ${WHITE}2.${NC} Repository name: ${BOLD_CYAN}" + repository + "${NC}\"",
    "  echo -e \"   ${WHITE}3.${NC} Make it ${BOLD_GREEN}public${NC}\"",
    "  echo -e \"   ${WHITE}4.${NC} Click ${BOLD_GREEN}'Create repository'${NC}\"",
    "  echo -e \"${GRAY}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"",
    "  echo \"\"",
    "  echo -e \"${GREEN}${INFO} Alternative: Install GitHub CLI with ${WHITE}'gh auth login'${NC}\"",
    "  echo \"\"",
    "  ",
    "  # Enhanced user interaction with cancellation option",
    "  while true; do",
    "    echo -e \"${BOLD_CYAN}Choose an option:${NC}\"",
    "    echo -e \"  ${GREEN}[Enter]${NC} - Continue (repository created or already exists)\"",
    "    echo -e \"  ${YELLOW}[r]${NC}     - Retry repository check\"",
    "    echo -e \"  ${RED}[c]${NC}     - Cancel script execution\"",
    "    echo \"\"",
    "    read -p \"$(echo -e \"${CYAN}Your choice: ${NC}\")\" user_choice",
    "    ",
    "    case \"$user_choice\" in",
    "      \"\")",
    "        echo -e \"${GREEN}${CHECKMARK} Continuing with repository setup...${NC}\"",
    "        break",
    "        ;;",      "      \"r\"|\"R\")",        "        echo -e \"${GREEN}${SEARCH} Rechecking repository status...${NC}\"",
        "        # First try GitHub API",
        "        if curl -s --connect-timeout 10 \"https://api.github.com/repos/" + username + "/" + repository + "\" | grep -q '\"name\"'; then",
        "          echo -e \"${GREEN}${CHECKMARK} Repository " + username + "/" + repository + " is now accessible!${NC}\"",
        "          return 0",
        "        # Fallback to git ls-remote",
        "        elif git ls-remote --heads --exit-code \"https://github.com/" + username + "/" + repository + ".git\" >/dev/null 2>&1; then",
        "          echo -e \"${GREEN}${CHECKMARK} Repository " + username + "/" + repository + " is now accessible!${NC}\"",
        "          return 0",
        "        else",
        "          echo -e \"${ORANGE}${WARNING} Repository still not found or accessible${NC}\"",
        "          echo -e \"${YELLOW}${INFO} Please ensure the repository exists and is public${NC}\"",
        "          echo \"\"",
        "        fi",
    "        ;;",
    "      \"c\"|\"C\")",
    "        echo \"\"",
    "        echo -e \"${YELLOW}${WARNING} Script execution cancelled by user${NC}\"",
    "        echo -e \"${BLUE}${INFO} No changes were made to your GitHub account${NC}\"",
    "        exit 0",
    "        ;;",
    "      *)",
    "        echo -e \"${RED}${CROSS} Invalid option. Please choose Enter, 'r', or 'c'${NC}\"",
    "        echo \"\"",
    "        ;;",
    "    esac",
    "  done",
    "  echo \"\"",
    "}",
    "",
    "# Enhanced progress display function",
    "show_progress() {",
    "  local current=$1",
    "  local total=$2",
    "  local percent=$((current * 100 / total))",
    "  local filled=$((percent / 5))",
    "  local empty=$((20 - filled))",
    "  ",
    "  # Ensure we don't exceed 100%",
    "  if [ $percent -gt 100 ]; then",
    "    percent=100",
    "    filled=20",
    "    empty=0",
    "  fi",
    "  ",
    "  printf \"\\r${CYAN}${PROGRESS} Progress: [\"",
    "  printf \"%*s\" $filled 2>/dev/null | tr ' ' '#' 2>/dev/null || printf \"\"",
    "  printf \"%*s\" $empty 2>/dev/null | tr ' ' '-' 2>/dev/null || printf \"\"",
    "  printf \"] $percent%% (${BOLD_GREEN}$current${CYAN}/${BOLD_BLUE}$total${CYAN}) commits${NC}\"",
    "  ",
    "  if [ $current -eq $total ]; then",
    "    echo \"\"",
    "    echo -e \"${BOLD_GREEN}${CHECKMARK} Progress complete!${NC}\"",
    "  fi",
    "}",
    "",
    "# Enhanced UI header",
    "show_header() {",
    "  clear",
    "  echo -e \"${BOLD_PURPLE}\"",
    "  echo \"╔═══════════════════════════════════════════════════════════════╗\"",
    "  echo \"║                  🎨 GITGENIX CONTRIBUTION ART 🎨              ║\"",
    "  echo \"║                         Advanced Generator                    ║\"",
    "  echo \"╚═══════════════════════════════════════════════════════════════╝\"",
    "  echo -e \"${NC}\"",
    "  echo \"\"",
    "  echo -e \"${WHITE}${FOLDER} Repository: ${BOLD_CYAN}" + username + "/" + repository + "${NC}\"",
    "  echo -e \"${WHITE}${LINK} Branch: ${BOLD_CYAN}" + branch + "${NC}\"",
    "  echo \"\"",
    "}",
    "",
    "# Main execution starts here",
    "show_header",
    "",
    "# Run comprehensive validation",
    "validate_prerequisites",
    "",
    "# Repository management",
    "create_repository_if_needed",
    "",
    "# Enhanced repository setup with better error handling",
    "echo -e \"${BOLD_CYAN}${GEAR} Repository Setup${NC}\"",
    "echo -e \"${GRAY}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"",
    "",
    "# Optimizations for better performance",
    "export GIT_TERMINAL_PROMPT=0",
    "export GIT_SSH_COMMAND='ssh -o BatchMode=yes -o StrictHostKeyChecking=no'",
    "",
    "echo -ne \"${BLUE}${SEARCH} Setting up local workspace...${NC}\"",
    "if git clone --quiet \"https://github.com/" + username + "/" + repository + ".git\" gitgenix 2>/dev/null; then",
    "  echo -e \"\\r${GREEN}${CHECKMARK} Repository cloned successfully${NC}\"",
    "  cd gitgenix",
    "  echo -ne \"${BLUE}${INFO} Checking out branch " + branch + "...${NC}\"",
    "  if git checkout " + branch + " 2>/dev/null || git checkout -b " + branch + " 2>/dev/null; then",
    "    echo -e \"\\r${GREEN}${CHECKMARK} Switched to branch " + branch + "${NC}\"",
    "  else",
    "    echo -e \"\\r${ORANGE}${WARNING} Using default branch, will create " + branch + " on push${NC}\"",
    "  fi",
    "else",
    "  echo -e \"\\r${BLUE}${GEAR} Creating local workspace for existing repository${NC}\"",
    "  mkdir gitgenix && cd gitgenix",
    "  git init --quiet",
    "  git checkout -b " + branch + " 2>/dev/null || true",
    "  echo -e \"${BLUE}${GEAR} Initializing repository workspace...${NC}\"",
    "  echo '# Gitgenix Contribution Art' > README.md",
    "  echo '' >> README.md",
    "  echo 'This repository contains contribution art created with Gitgenix.' >> README.md",
    "  echo 'Visit https://gitgenix.netlify.app to create your own!' >> README.md",
    "  echo '' >> README.md",
    "  echo '## About' >> README.md",
    "  echo 'Generated automatically using the Gitgenix contribution art generator.' >> README.md",
    "  echo 'Each commit in this repository represents a pixel in the final artwork.' >> README.md",
    "  git add README.md",
    "  git commit --quiet -m 'Initial commit: Gitgenix contribution art setup'",
    "  echo -e \"${GREEN}${CHECKMARK} Repository initialized with README${NC}\"",
    "fi",
    "",
    "# Configure git settings for optimal performance",
    "echo -e \"${BLUE}${GEAR} Optimizing Git configuration...${NC}\"",
    "git config core.autocrlf false",
    "git config core.safecrlf false",
    "git config core.preloadindex true",
    "git config core.fscache true",
    "git config gc.auto 0",
    "echo -e \"${GREEN}${CHECKMARK} Git optimized for batch operations${NC}\"",
    "",
    "# Prepare enhanced contribution log",
    "echo -e \"${BLUE}${GEAR} Preparing contribution tracking...${NC}\"",
    "echo 'Gitgenix Contribution Art Generation Log' > gitgenix-contributions.txt",
    "echo '=======================================' >> gitgenix-contributions.txt",
    "echo '' >> gitgenix-contributions.txt",
    "echo 'Generated: '$(date) >> gitgenix-contributions.txt",
    "echo 'Repository: " + username + "/" + repository + "' >> gitgenix-contributions.txt",
    "echo 'Branch: " + branch + "' >> gitgenix-contributions.txt",
    "echo 'Generator: Gitgenix v2.0' >> gitgenix-contributions.txt",
    "echo '' >> gitgenix-contributions.txt",
    "echo 'Commit Log:' >> gitgenix-contributions.txt",
    "echo '-----------' >> gitgenix-contributions.txt",
    "echo '' >> gitgenix-contributions.txt",
    "echo -e \"${GREEN}${CHECKMARK} Contribution log initialized${NC}\"",
    "",
  ];

  // Collect and sort dates for optimal processing
  const dateMap = new Map<number, number>();
  let totalCommits = 0;
  
  for (const graph of Object.values(graphs)) {
    for (const cell of graph.cells) {
      if (!cell.isOutOfRange && cell.intensity > 0) {
        dateMap.set(cell.date.getTime(), cell.intensity);
        totalCommits += commitMap[cell.intensity] || 0;
      }
    }
  }  lines.push(
    "# Enhanced commit generation phase",
    "echo -e \"${BOLD_CYAN}${ROCKET} Commit Generation Phase${NC}\"",
    "echo -e \"${GRAY}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"",
    "",
    "echo -e \"${WHITE}${INFO} Total commits to create: ${BOLD_GREEN}" + totalCommits + "${NC}\"",
    "echo -e \"${WHITE}${INFO} Days with activity: ${BOLD_BLUE}" + dateMap.size + "${NC}\"",
    "echo \"\"",
    "",
    "# Initialize commit tracking",
    "commit_count=0",
    "total_commits=" + totalCommits,
    "echo -e \"${BOLD_CYAN}${ROCKET} Initializing commit generation...${NC}\"",
    "show_progress 0 $total_commits",
    ""
  );

  // Generate commits with unique messages and better progress tracking
  const sortedDates = Array.from(dateMap.entries()).sort((a, b) => a[0] - b[0]);
  let globalCommitIndex = 0;
  
  sortedDates.forEach(([time, intensity]) => {
    const dateStr = new Date(time).toISOString().slice(0, 10) + "T12:00:00 UTC";
    const count = commitMap[intensity] || 0;
    const dateFormatted = new Date(time).toISOString().slice(0, 10);
    
    if (count > 0) {
      lines.push(
        `# Processing ${dateFormatted} - ${count} commits (intensity ${intensity})`,
      );
      
      for (let i = 0; i < count; i++) {
        const uniqueMsg = generateUniqueCommitMessage(globalCommitIndex);
        const escapedMsg = uniqueMsg.replace(/'/g, "'\"'\"'").replace(/"/g, '\\"');
        
        lines.push(
          `export GIT_AUTHOR_DATE="${dateStr}"`,
          `export GIT_COMMITTER_DATE="${dateStr}"`,
          `echo "[${dateFormatted}] ${escapedMsg}" >> gitgenix-contributions.txt`,
          `git add gitgenix-contributions.txt`,
          `git commit --quiet -m "${escapedMsg}"`,
          `commit_count=$((commit_count + 1))`,
          `show_progress $commit_count $total_commits`,
        );
        
        globalCommitIndex++;
      }
      
      // Add a small delay every 50 commits to prevent overwhelming the system
      if (globalCommitIndex % 50 === 0) {
        lines.push("sleep 0.1");
      }
    }
  });
  lines.push(
    "",
    "echo \"\"",
    "echo -e \"${BOLD_GREEN}${CHECKMARK} All commits created successfully!${NC}\"",
    "echo -e \"${WHITE} Final count: ${BOLD_YELLOW}$commit_count${WHITE} commits generated${NC}\"",
    "",
    "# Enhanced remote configuration and push with better error handling",
    "echo -e \"${BOLD_CYAN}${LINK} Repository Publishing Phase${NC}\"",
    "echo -e \"${GRAY}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"",
    "",
    "echo -e \"${BLUE}${GEAR} Configuring remote repository...${NC}\"",
    "git remote remove origin 2>/dev/null || true",
    "git remote add origin \"https://github.com/" + username + "/" + repository + ".git\"",
    "git branch -M " + branch,
    "echo -e \"${GREEN}${CHECKMARK} Remote configured successfully${NC}\"",
    "",
    "echo -e \"${BOLD_CYAN}${ROCKET} Publishing to GitHub...${NC}\"",
    "echo -e \"${YELLOW}${PROGRESS} This may take a moment for large patterns${NC}\"",
    "",
    "# Enhanced push with comprehensive retry logic",    "push_attempts=0",
    "max_attempts=3",
    "push_success=false",
    "",
    "while [ $push_attempts -lt $max_attempts ] && [ \"$push_success\" = \"false\" ]; do",
    "  push_attempts=$((push_attempts + 1))",
    "  echo -e \"${BLUE}${INFO} Push attempt $push_attempts of $max_attempts...${NC}\"",
    "",
    "  # Capture push output for better error diagnosis",
    "  if git push --progress -u origin " + branch + " 2>&1; then",
    "    push_success=true",
    "    echo \"\"",
    "    echo -e \"${BOLD_GREEN}${CHECKMARK} Successfully published to GitHub!${NC}\"",
    "    ",
    "    # Verify the push was successful by checking remote",
    "    echo -e \"${BLUE}${SEARCH} Verifying commits on GitHub...${NC}\"",
    "    sleep 2  # Give GitHub a moment to process",
    "    ",
    "    if git ls-remote origin " + branch + " >/dev/null 2>&1; then",
    "      echo -e \"${GREEN}${CHECKMARK} Commits verified on GitHub${NC}\"",
    "    else",
    "      echo -e \"${YELLOW}${WARNING} Could not verify commits (may take a moment to appear)${NC}\"",
    "    fi",
    "  else",
    "    push_exit_code=$?",
    "    echo \"\"",
    "    echo -e \"${ORANGE}${WARNING} Push attempt $push_attempts failed (exit code: $push_exit_code)${NC}\"",
    "    ",
    "    # Provide specific error guidance based on common issues",
    "    if [ $push_exit_code -eq 128 ]; then",
    "      echo -e \"${YELLOW}${INFO} This might be an authentication issue${NC}\"",    "    elif [ $push_exit_code -eq 1 ]; then",
    "      echo -e \"${YELLOW}${INFO} This might be a permission or repository access issue${NC}\"",
    "    fi",
    "    ",
    "    if [ $push_attempts -lt $max_attempts ]; then",
    "      echo -e \"${BLUE}${INFO} Retrying in 3 seconds...${NC}\"",
    "      sleep 3",
    "    fi",
    "  fi",
    "done",
    "",
    "if [ \"$push_success\" = \"false\" ]; then",
    "  echo \"\"",
    "  echo -e \"${BOLD_RED}${CROSS} All push attempts failed${NC}\"",
    "  echo -e \"${GRAY}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"",
    "  echo -e \"${YELLOW}${WARNING} Possible causes and solutions:${NC}\"",
    "  echo \"\"",
    "  echo -e \"${WHITE}1. Authentication Issues:${NC}\"",
    "  echo -e \"   • Run: ${BOLD_CYAN}'git config --global credential.helper store'${NC}\"",
    "  echo -e \"   • Or use GitHub CLI: ${BOLD_CYAN}'gh auth login'${NC}\"",
    "  echo -e \"   • Check your GitHub username and token/password\"",
    "  echo \"\"",
    "  echo -e \"${WHITE}2. Repository Access:${NC}\"",
    "  echo -e \"   • Ensure repository exists: ${BOLD_CYAN}'https://github.com/" + username + "/" + repository + "'${NC}\"",
    "  echo -e \"   • Check you have write access to the repository\"",
    "  echo -e \"   • Repository might be private (make it public)\"",
    "  echo \"\"",
    "  echo -e \"${WHITE}3. Network Issues:${NC}\"",
    "  echo -e \"   • Check your internet connection\"",
    "  echo -e \"   • Try again in a few minutes\"",
    "  echo -e \"   • Check if GitHub is accessible\"",
  "  echo \"\"",
  "  echo -e \"${CYAN}${INFO} Manual Recovery:${NC}\"",
  "  echo -e \"   • Your commits are saved locally in the 'gitgenix' directory\"",
  "  echo -e \"   • Navigate to the directory: ${WHITE}'cd gitgenix'${NC}\"",
  "  echo -e \"   • Try pushing manually: ${WHITE}'git push -u origin " + branch + "'${NC}\"",
  "  echo -e \"   • Or create a new repository and push there\"",
  "  echo \"\"",
  "  echo -e \"${GRAY}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"",
  "  echo -e \"${BOLD_RED}${CROSS} Script execution stopped. Commits preserved locally.${NC}\"",
  "  exit 1",
  "fi",
  "",
  "# Enhanced success summary",
  "echo \"\"",
  "echo -e \"${BOLD_PURPLE}\"",
  "echo \"╔═══════════════════════════════════════════════════════════════╗\"",
  "echo \"║                      🎉 SUCCESS! 🎉                           ║\"",
  "echo \"║              Gitgenix Art Created Successfully!               ║\"",
  "echo \"╚═══════════════════════════════════════════════════════════════╝\"",
  "echo -e \"${NC}\"",    "echo \"\"",
    "echo -e \"${WHITE}${CELEBRATION} Results Summary:${NC}\"",
    "echo -e \"${GRAY}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"",
    "echo -e \"${BOLD_GREEN}${CHECKMARK} Commits Created: ${BOLD_YELLOW}$commit_count${NC}\"",
    "echo -e \"${BOLD_GREEN}${CHECKMARK} Days Filled: ${BOLD_BLUE}" + dateMap.size + "${NC}\"",
    "echo -e \"${BOLD_GREEN}${CHECKMARK} Repository: ${BOLD_CYAN}" + username + "/" + repository + "${NC}\"",
    "echo -e \"${BOLD_GREEN}${CHECKMARK} Branch: ${BOLD_CYAN}" + branch + "${NC}\"",
    "echo \"\"",
    "echo -e \"${WHITE}${ART} View Your Contribution Art:${NC}\"",
    "echo -e \"   ${BOLD_CYAN}🔗 https://github.com/" + username + "${NC}\"",
    "echo \"\"",
    "echo -e \"${WHITE}${FOLDER} Repository Details:${NC}\"",
    "echo -e \"   ${BOLD_CYAN}🔗 https://github.com/" + username + "/" + repository + "${NC}\"",
    "echo \"\"",
    "echo -e \"${GRAY}${INFO} Pro tip: It may take a few minutes for GitHub to update your contribution graph${NC}\"",
    "",
    "# Enhanced cleanup",
    "echo -e \"${BLUE}${CLEAN} Performing workspace cleanup...${NC}\"",
    "cd ..",
    "rm -rf gitgenix",
    "echo -e \"${GREEN}${CHECKMARK} Workspace cleaned successfully${NC}\"",
    "echo \"\"",
    "echo -e \"${BOLD_PURPLE}${CELEBRATION} Thank you for using Gitgenix! ${ART}${NC}\"",
    "echo -e \"${CYAN} Visit https://gitgenix.netlify.app for more patterns!${NC}\"",
    "echo \"\""
  );

  return lines.join("\n");
}
