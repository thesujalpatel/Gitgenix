// Export/Import component for Arcadia
import React, { useState } from "react";
import { IoMdDownload, IoMdShare, IoMdCloudUpload } from "react-icons/io";
import { RiSave3Line } from "react-icons/ri";
import { toast } from "react-hot-toast";
import { motion, AnimatePresence } from "framer-motion";
import download from "downloadjs";
import {
  saveGraphToFirestore,
  stringifyGraphData,
  parseGraphData,
} from "../../firebase/dataService";
import type { Cell } from "../types/cell";

interface DataIOProps {
  graphs: Record<
    string,
    {
      cells: Cell[];
      yearStart: Date;
      yearEnd: Date;
      monthLabels: Record<number, number>;
    }
  >;
  setGraphs: React.Dispatch<
    React.SetStateAction<
      Record<
        string,
        {
          cells: Cell[];
          yearStart: Date;
          yearEnd: Date;
          monthLabels: Record<number, number>;
        }
      >
    >
  >;
  username: string;
  repository: string;
  branch: string;
  setUsername: (username: string) => void;
  setRepository: (repository: string) => void;
  setBranch: (branch: string) => void;
}

export default function DataIO({
  graphs,
  setGraphs,
  username,
  repository,
  branch,
  setUsername,
  setRepository,
  setBranch
}: DataIOProps) {
  const [isExporting, setIsExporting] = useState(false);
  const [isImporting, setIsImporting] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [isSharing, setIsSharing] = useState(false);
  const [patternName, setPatternName] = useState("");
  const [shareUrl, setShareUrl] = useState("");
  const [savedPatternId, setSavedPatternId] = useState("");
  const [importProgress, setImportProgress] = useState(0);
  
  // Export graph data as JSON file with enhanced animation
  const handleExport = () => {
    setIsExporting(true);
    try {
      // Include username, repository and branch in the exported JSON
      const jsonData = stringifyGraphData(graphs, username, repository, branch);
      const filename = `arcadia-pattern-${new Date()
        .toISOString()
        .slice(0, 10)}.json`;
      download(jsonData, filename, "application/json");
      toast.success("Pattern exported successfully!", {
        icon: "ðŸ’¾",
        style: {
          border: '1px solid var(--color-primary)',
          padding: '12px',
        },
      });
    } catch (error) {
      console.error("Export failed:", error);
      toast.error("Failed to export pattern");
    } finally {
      setIsExporting(false);
    }
  };
  
  // Import graph data from JSON file with progress visualization
  const handleImport = (event: React.ChangeEvent<HTMLInputElement>) => {
    setIsImporting(true);
    setImportProgress(0);
    const file = event.target.files?.[0];
    if (!file) {
      setIsImporting(false);
      return;
    }

    // Start progress animation
    const progressInterval = setInterval(() => {
      setImportProgress(prev => {
        if (prev >= 90) {
          clearInterval(progressInterval);
          return prev;
        }
        return prev + Math.random() * 10;
      });
    }, 100);

    const reader = new FileReader();
    reader.onload = (e) => {
      clearInterval(progressInterval);
      setImportProgress(100);
      
      try {
        const jsonData = e.target?.result as string;
        const parsed = parseGraphData(jsonData);

        // Update graphs state with parsed data
        setGraphs(parsed.graphs);

        // Extract and update metadata if available
        if (parsed.metadata) {
          if (parsed.metadata.username) {
            setUsername(parsed.metadata.username);
          }

          if (parsed.metadata.repository) {
            setRepository(parsed.metadata.repository);
          }

          if (parsed.metadata.branch) {
            setBranch(parsed.metadata.branch || 'main');
          }
        }

        // Enhanced visual feedback
        toast.success("Pattern imported successfully!", {
          icon: "ðŸŽ¨",
          duration: 3000,
          style: {
            border: '1px solid var(--color-primary)',
            padding: '16px',
          },
        });
      } catch (error) {
        console.error("Import failed:", error);
        toast.error("Failed to import pattern: Invalid file format");
      } finally {
        setIsImporting(false);
        // Reset progress after animation completes
        setTimeout(() => setImportProgress(0), 500);
      }
    };
    
    reader.onerror = () => {
      clearInterval(progressInterval);
      setImportProgress(0);
      toast.error("Failed to read file");
      setIsImporting(false);
    };
    
    reader.readAsText(file);

    // Reset the input so the same file can be imported again if needed
    event.target.value = "";
  };

  // Save pattern to Firebase with enhanced animation
  const handleSave = async () => {
    if (!patternName.trim()) {
      toast.error("Please enter a name for your pattern");
      return;
    }

    setIsSaving(true);
    try {
      const patternId = await saveGraphToFirestore(
        patternName.trim(),
        graphs,
        username,
        repository,
        branch
      );

      setSavedPatternId(patternId);
      const shareableUrl = `${window.location.origin}/draw/share/${patternId}`;
      setShareUrl(shareableUrl);
      
      toast.success("Pattern saved successfully!", {
        icon: "ðŸš€",
        style: {
          border: '1px solid var(--color-primary)',
          padding: '12px',
        },
      });

      // Automatically show sharing options after saving
      setIsSharing(true);
      setIsSaving(false);
    } catch (error) {
      console.error("Save failed:", error);
      toast.error("Failed to save pattern");
      setIsSaving(false);
    }
  };

  // Share pattern
  const handleShare = () => {
    if (!savedPatternId) {
      toast.error("Please save your pattern first");
      return;
    }

    setIsSharing(true);
    const shareableUrl = `${window.location.origin}/draw/share/${savedPatternId}`;
    setShareUrl(shareableUrl);
  };

  // Copy share URL to clipboard
  const handleCopyLink = () => {
    navigator.clipboard.writeText(shareUrl);
    toast.success("Link copied to clipboard!");
  };

  return (
    <motion.div
      className="w-full mb-5"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="flex flex-wrap gap-4 items-center">
        {/* Export Button */}
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={handleExport}
          disabled={isExporting || Object.keys(graphs).length === 0}
          className={`flex items-center px-4 py-2 rounded-lg bg-foreground/5 border border-foreground/40 hover:bg-foreground/10 disabled:opacity-50 disabled:cursor-not-allowed`}
        >
          <IoMdDownload className="mr-2" size={20} />
          {isExporting ? "Exporting..." : "Export as JSON"}
        </motion.button>

        {/* Import Button */}
        <div className="relative">
          <label htmlFor="file-upload" className="sr-only">Import JSON file</label>
          <input
            type="file"
            id="file-upload"
            accept=".json"
            onChange={handleImport}
            className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
            title="Import pattern from JSON file"
            aria-label="Import pattern from JSON file"
          />
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            disabled={isImporting}
            className={`flex items-center px-4 py-2 rounded-lg bg-foreground/5 border border-foreground/40 hover:bg-foreground/10 disabled:opacity-50 disabled:cursor-not-allowed`}
          >
            <IoMdCloudUpload className="mr-2" size={20} />
            {isImporting ? "Importing..." : "Import from JSON"}
          </motion.button>
          
          {/* Import progress indicator */}
          {importProgress > 0 && (
            <motion.div 
              className="absolute left-0 bottom-0 h-1 bg-primary rounded-full"
              initial={{ width: 0 }}
              animate={{ width: `${importProgress}%` }}
              transition={{ duration: 0.3 }}
            />
          )}
        </div>

        {/* Save Button */}
        <motion.div
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          className="flex items-center"
        >          <label htmlFor="pattern-name" className="sr-only">Pattern name</label>
          <input
            id="pattern-name"
            type="text"
            value={patternName}
            onChange={(e) => setPatternName(e.target.value)}
            placeholder="Pattern name"
            className="border-[1.5] border-foreground/40 rounded-l-lg px-3 py-2"
            aria-label="Pattern name for saving online"
          />
          <button
            onClick={handleSave}
            disabled={
              isSaving ||
              !patternName.trim() ||
              Object.keys(graphs).length === 0
            }
            className={`flex items-center px-4 py-2 rounded-r-lg bg-primary text-white hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed`}
          >
            <RiSave3Line className="mr-2" size={20} />
            {isSaving ? "Saving..." : "Save Online"}
          </button>
        </motion.div>

        {/* Share Button */}
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={handleShare}
          disabled={!savedPatternId}
          className={`flex items-center px-4 py-2 rounded-lg bg-foreground/5 border border-foreground/40 hover:bg-foreground/10 disabled:opacity-50 disabled:cursor-not-allowed`}
        >
          <IoMdShare className="mr-2" size={20} />
          Share
        </motion.button>
      </div>

      {/* Share Dialog with AnimatePresence for smooth transitions */}
      <AnimatePresence>
        {isSharing && shareUrl && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.3 }}
            className="mt-4 p-4 rounded-lg border border-foreground/20 bg-foreground/5"
          >
            <h3 className="text-lg font-semibold mb-2">
              Share your Arcadia pattern
            </h3>
            <div className="flex items-center gap-2">            <label htmlFor="share-url" className="sr-only">Share URL</label>
            <input
              id="share-url"
              type="text"
              value={shareUrl}
              readOnly
              className="flex-grow border-[1.5] border-foreground/40 rounded-lg px-3 py-2 bg-background"
              aria-label="Shareable link for your pattern"
              title="Shareable link for your pattern"
            />
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={handleCopyLink}
              className="px-4 py-2 rounded-lg bg-primary text-white hover:bg-primary/90"
            >
              Copy Link
            </motion.button>
          </div>
          <div className="mt-2 text-sm text-foreground/60">
            Anyone with this link can view and import your pattern.
          </div>
          <button
            onClick={() => setIsSharing(false)}
            className="mt-2 text-sm text-foreground/60 hover:text-foreground"
          >
            Close
          </button>
        </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
}
